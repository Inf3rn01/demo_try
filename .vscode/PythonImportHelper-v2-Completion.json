[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "database_manager",
        "description": "database_manager",
        "isExtraImport": true,
        "detail": "database_manager",
        "documentation": {}
    },
    {
        "label": "flet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flet",
        "description": "flet",
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "check_login",
        "importPath": "database.database_operations",
        "description": "database.database_operations",
        "isExtraImport": true,
        "detail": "database.database_operations",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "database.database_operations",
        "description": "database.database_operations",
        "isExtraImport": true,
        "detail": "database.database_operations",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "database.database_manager",
        "description": "database.database_manager",
        "isExtraImport": true,
        "detail": "database.database_manager",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "pages",
        "description": "pages",
        "isExtraImport": true,
        "detail": "pages",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "pages",
        "description": "pages",
        "isExtraImport": true,
        "detail": "pages",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "kind": 6,
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "peekOfCode": "class DBManager():\n    def __init__(self, db_path: str) -> None:\n        self.db_path = db_path\n    def check_base(self):\n        return os.path.exists(self.db_path)\n    def connect_to_db(self):\n        con = sqlite3.connect(self.db_path)\n        cur = con.cursor()\n        return con, cur\n    def execute(self, query: str, args=(), many: bool = True):",
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "base_manager",
        "kind": 5,
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "peekOfCode": "base_manager = DBManager(DB_PATH)",
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "peekOfCode": "def check_login(db_manager: DBManager, login: str, password: str):\n    query = \"SELECT id, name, post_id FROM users WHERE login = ? AND password = ?\"\n    params = (login, password)\n    result = db_manager.execute(query, params)\n    if result['code'] == 200 and result['data']:\n        user_id, name, post_id = result['data'][0]\n        return {\"id\": user_id, \"name\": name, \"post_id\": post_id}\n    else:\n        return None\ndef register(db_manager: DBManager, name: str, login: str, password: str):",
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "peekOfCode": "def register(db_manager: DBManager, name: str, login: str, password: str):\n    query = \"INSERT INTO users (name, login, password) VALUES (?, ?, ?)\"\n    params = (name, login, password)\n    result = db_manager.execute(query, params, many=False)\n    if result['code'] == 200:\n        print(\"Registration successful\")\n        return True\n    else:\n        print(\"Registration failed\")\n        return False",
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "src.pages.login_form",
        "description": "src.pages.login_form",
        "peekOfCode": "class LoginForm(ft.UserControl):\n    def __init__(self, db_manager, go_to_registration):\n        super().__init__()\n        self.db_manager = db_manager\n        self.go_to_registration = go_to_registration\n    def build(self):\n        self.appbar = ft.AppBar(\n            title=ft.Text(\"Вход\"),\n        )\n        self.loginField = ft.TextField(label=\"Логин\")",
        "detail": "src.pages.login_form",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "src.pages.main_window",
        "description": "src.pages.main_window",
        "peekOfCode": "class MainWindow(ft.UserControl):\n    def build(self):\n        return",
        "detail": "src.pages.main_window",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "src.pages.registration_form",
        "description": "src.pages.registration_form",
        "peekOfCode": "class RegistrationForm(ft.UserControl):\n    def __init__(self, db_manager, go_to_login):\n        super().__init__()\n        self.db_manager = db_manager\n        self.go_to_login = go_to_login\n    def build(self):\n        self.appbar = ft.AppBar(\n            title=ft.Text(\"Регистрация\"),\n            leading=ft.IconButton(\n                icon=ft.icons.ARROW_BACK,",
        "detail": "src.pages.registration_form",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "def main(page: ft.Page):\n    db_manager = DBManager(DB_PATH)\n    # Функция для перехода на страницу логина\n    def go_to_login(e):\n        page.go('/login')\n    # Функция для перехода на страницу регистрации\n    def go_to_registration(e):\n        page.go('/registration')\n    # Определяем маршруты\n    def route_change(route):",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "DB_PATH = 'colledge.db'",
        "detail": "settings",
        "documentation": {}
    }
]