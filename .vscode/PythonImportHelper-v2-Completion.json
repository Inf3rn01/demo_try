[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "isExtraImport": true,
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "isExtraImport": true,
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "flet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flet",
        "description": "flet",
        "detail": "flet",
        "documentation": {}
    },
    {
        "label": "check_login",
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "isExtraImport": true,
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "isExtraImport": true,
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "src.pages.login_form",
        "description": "src.pages.login_form",
        "isExtraImport": true,
        "detail": "src.pages.login_form",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "src.pages.registration_form",
        "description": "src.pages.registration_form",
        "isExtraImport": true,
        "detail": "src.pages.registration_form",
        "documentation": {}
    },
    {
        "label": "DBManager",
        "kind": 6,
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "peekOfCode": "class DBManager:\n    def __init__(self, db_path: str) -> None:\n        self.db_path = db_path\n    def check_base(self):\n        return os.path.exists(self.db_path)\n    def connect_to_db(self):\n        con = sqlite3.connect(self.db_path)\n        cur = con.cursor()\n        return con, cur\n    def execute(self, query: str, args=(), many: bool = True):",
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "base_manager",
        "kind": 5,
        "importPath": "src.database.database_manager",
        "description": "src.database.database_manager",
        "peekOfCode": "base_manager = DBManager(DB_PATH)",
        "detail": "src.database.database_manager",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "peekOfCode": "def check_login(db_manager: DBManager, login: str, password: str):\n    query = \"SELECT UserID, TypeID FROM Users WHERE login = ? AND password = ?\" # UserID = id, TypeID = post_id\n    params = (login, password)\n    result = db_manager.execute(query, params)\n    if result['code'] == 200 and result['data']:\n        UserID, TypeID = result['data'][0]\n        return {\"id\": UserID, \"post_id\": TypeID}\n    else:\n        return None\ndef register(db_manager: DBManager, name: str, login: str, password: str):",
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "src.database.database_operations",
        "description": "src.database.database_operations",
        "peekOfCode": "def register(db_manager: DBManager, name: str, login: str, password: str):\n    query = \"INSERT INTO users (fio, login, password) VALUES (?, ?, ?)\"\n    params = (name, login, password)\n    result = db_manager.execute(query, params, many=False)\n    if result['code'] == 200:\n        print(\"Registration successful\")\n        return True\n    else:\n        print(\"Registration failed\")\n        return False",
        "detail": "src.database.database_operations",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "src.pages.login_form",
        "description": "src.pages.login_form",
        "peekOfCode": "class LoginForm(ft.UserControl):\n    def __init__(self, db_manager, navigate_to_registration, navigate_to_main_window):\n        super().__init__()\n        self.db_manager = db_manager\n        self.navigate_to_registration = navigate_to_registration\n        self.navigate_to_main_window = navigate_to_main_window\n    def build(self):\n        self.loginField = ft.TextField(label=\"Логин\", on_change=self.validate)\n        self.passwordField = ft.TextField(label=\"Пароль\", password=True, on_change=self.validate)\n        self.login_button = ft.ElevatedButton(text=\"Войти\", on_click=self.login_clicked, disabled=True)",
        "detail": "src.pages.login_form",
        "documentation": {}
    },
    {
        "label": "main_window",
        "kind": 2,
        "importPath": "src.pages.main_window",
        "description": "src.pages.main_window",
        "peekOfCode": "def main_window(page: ft.Page):\n    page.title = \"Главное окно\"\n    page.controls.clear()\n    page.appbar = ft.AppBar(\n        title=ft.Text(\"Главное окно\"),\n        center_title=True,\n        bgcolor=ft.colors.SURFACE_VARIANT,\n    )\n    page.add(ft.Text(\"Добро пожаловать в главное окно!\"))\n    page.update()  # Обновляем страницу для отображения изменений",
        "detail": "src.pages.main_window",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "src.pages.registration_form",
        "description": "src.pages.registration_form",
        "peekOfCode": "class RegistrationForm(ft.UserControl):\n    def __init__(self, db_manager, navigate_to_login, navigate_to_main_window):\n        super().__init__()\n        self.db_manager = db_manager\n        self.navigate_to_main_window = navigate_to_main_window\n        self.navigate_to_login = navigate_to_login\n    def build(self):\n        self.usernameField = ft.TextField(label=\"Имя пользователя\", on_change=self.validate)\n        self.loginField = ft.TextField(label=\"Логин\", on_change=self.validate)\n        self.passwordField = ft.TextField(label=\"Пароль\", password=True, on_change=self.validate)",
        "detail": "src.pages.registration_form",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "def main(page: ft.Page):\n    db_manager = DBManager(DB_PATH)\n    def navigate_to_main_window():\n        from src.pages import main_window\n        main_window.main_window(page)  # Переходим на главное окно\n    def show_login_page():\n        page.controls.clear()  # Очищаем текущие элементы страницы\n        page.appbar = ft.AppBar(\n            title=ft.Text(\"Логин\"),\n            center_title=True,",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "DB_PATH = './src/database/college.db'",
        "detail": "settings",
        "documentation": {}
    }
]